Object subclass: #Direction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Direction commentStamp: '<historical>' prior: 0!Direction!!Direction methodsFor: 'evaluating' stamp: 'PLP 10/9/2017 17:52'!nextFrom: puntoDeOrigen"Dado un punto, devuelve el resultado de moverse en la direccion correspondiente. "^self class nextFrom: puntoDeOrigen ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Direction class	instanceVariableNames: ''!!Direction class methodsFor: 'evaluating' stamp: 'PLP 10/9/2017 17:54'!nextFrom: puntoDeOrigen	^ self subclassResponsibility ! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:53'!north	^North new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:59'!southwest	^Southwest new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:52'!south	^South new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:53'!east	^East new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:59'!southeast	^Southeast new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:59'!northwest	^Northwest new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:59'!northeast	^Northeast new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:53'!west	^West new! !Direction subclass: #East	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!East commentStamp: '<historical>' prior: 0!East!!East methodsFor: 'evaluating' stamp: 'MartinFosco 11/1/2017 21:50'!nextFrom: aCoordinate	^ ((aCoordinate x) + 1) @ (aCoordinate y)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!East class	instanceVariableNames: ''!!East class methodsFor: 'evaluating' stamp: 'PLP 10/14/2017 23:32'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x + 1)@(puntoDeOrigen y)! !Object subclass: #Game	instanceVariableNames: 'terrain teams'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Game methodsFor: 'operation' stamp: 'mgatti 11/9/2017 00:19'!pass	| first |	first := teams removeFirst.	teams addLast: first. ! !!Game methodsFor: 'operation' stamp: 'mgatti 11/9/2017 01:11'!currentWinners	"comment stating purpose of message"	| flags flagsPerTeam winners |	flags := terrain select: [ :element | element class = Flag].	flags := flags select: [ :element | element team isNotNil].	flagsPerTeam := flags groupedBy: [ :flag | flag team ].	flagsPerTeam ifEmpty:  [ ^OrderedCollection new ].	winners := (flagsPerTeam detectMax: [:value | value size]) size.	winners := flagsPerTeam select: [ :value | value size = winners ].	^winners keys! !!Game methodsFor: 'operation' stamp: 'mgatti 11/9/2017 00:34'!moveCharacter: index to: direction steps: numberOfSteps.	"comment stating purpose of message"	(self currentTeam members at: index) move: numberOfSteps to: direction.	self pass.	! !!Game methodsFor: 'getter' stamp: 'MichaelJackson 11/7/2017 23:39'!currentTeam	"Return next team to play"	^teams at: 1! !!Game methodsFor: 'setter' stamp: 'mgatti 11/9/2017 00:22'!initializeX: x Y: y trapLocations: trapLocations flagLocations: flagLocations	terrain := Terrain dimX: x dimY: y. 	trapLocations do: [ :location | terrain at: location put: (Trap new)].	flagLocations do: [ :location | terrain at: location put: (Flag new)].	teams := OrderedCollection new.	^self	! !!Game methodsFor: 'setter' stamp: 'Anonymous 11/8/2017 00:43'!registerTeam: teamName playerLocations: playerLocations	"comment stating purpose of message"	| teamMembers|	teamMembers := OrderedCollection new.	1 to: (playerLocations size)/2 do: [:index |	    	teamMembers add: ((playerLocations at: 2*index) new: terrain with: (playerLocations at: 2*index-1) and: teamName)].		teams add: (GameTeam new: teamName with: teamMembers).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Game class	instanceVariableNames: ''!!Game class methodsFor: 'construction' stamp: 'MichaelJackson 11/7/2017 23:26'!newX: x Y: y trapLocations: trapLocations flagLocations: flagLocations	"Game constructor"	^self new initializeX: x Y: y trapLocations: trapLocations flagLocations: flagLocations ! !Object subclass: #GameObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!GameObject methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 20:50'!isTargetOfEngineer	self subclassResponsibility ! !!GameObject methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 20:54'!isVisibleByMedic	self subclassResponsibility ! !!GameObject methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 20:50'!isTargetOfExplorer	self subclassResponsibility ! !!GameObject methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 20:50'!isTargetOfMedic	self subclassResponsibility ! !!GameObject methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 20:54'!isVisibleByExplorer	self subclassResponsibility ! !GameObject subclass: #GameCharacter	instanceVariableNames: 'team healthy terrain target'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:49'!healedBy: aGameCharacter		self assert: aGameCharacter ~= self.	self assert: aGameCharacter canHeal.	healthy := true.! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/1/2017 20:02'!isVisibleByMedic	^ true ! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/1/2017 20:21'!isVisible	^ true! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:50'!canMoveTo: aDirection	^ self canMove and: (terrain canBeOccupied: ( terrain coordinateOf: aDirection from: self ))! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/4/2017 01:32'!location	^ terrain coordinateOf: self! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 21:40'!isTargetOfEngineer	^ false! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:46'!canHeal	self subclassResponsibility ! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/1/2017 20:02'!isVisibleByExplorer	^ true ! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/1/2017 20:36'!with: aTerrain with: aStartingCoordinate and: aTeamColour	team := aTeamColour.	aTerrain at: aStartingCoordinate put: self ifInvalid: [ self error ].	terrain := aTerrain.! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:48'!disable	healthy := false.! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 21:40'!isTargetOfExplorer	^ false! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:50'!isTargetOfMedic: medicTeam	^ (healthy not) and: (medicTeam = team)! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/4/2017 16:36'!moveTo: aDirection	(self canMoveTo: aDirection) ifTrue: [terrain move: self in: aDirection].	^ self! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:29'!interactWithAllElements	|interactableElements|	interactableElements := terrain										elementsAround: self										satisfying: self target.	interactableElements do: self action.	^ self! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 23:40'!adjacentTo: aGameObject	^ (terrain elementsAround: self) includes: aGameObject ! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 22:34'!action	self subclassResponsibility! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/1/2017 20:57'!canBeSteppedOn		^ false! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:46'!canMove	^ healthy  ! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/1/2017 18:23'!team	^ team! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 18:05'!selectVisibleFrom: aCollection	self subclassResponsibility ! !!GameCharacter methodsFor: 'testing' stamp: 'PLP 10/30/2017 03:29'!canSee: anElement	self subclassResponsibility! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 23:41'!target	self subclassResponsibility ! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:46'!initialize	healthy := true! !!GameCharacter methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:32'!move: aNumber to: aDirection	aNumber timesRepeat: [ self moveTo: aDirection ].	^ self! !GameCharacter subclass: #Engineer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Engineer methodsFor: 'instance creation' stamp: 'MartinFosco 12/6/2017 17:59'!selectVisibleFrom: aCollection	^ aCollection! !!Engineer methodsFor: 'instance creation' stamp: 'MartinFosco 12/6/2017 17:42'!canHeal	^ false ! !!Engineer methodsFor: 'instance creation' stamp: 'MartinFosco 12/6/2017 17:55'!action		^ [ :aGameObject | terrain remove: aGameObject ]! !!Engineer methodsFor: 'instance creation' stamp: 'MartinFosco 12/6/2017 17:53'!canSee: anElement	^ true! !!Engineer methodsFor: 'instance creation' stamp: 'MartinFosco 11/2/2017 23:42'!target	^ [:aGameObject | (aGameObject isTargetOfEngineer)]	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Engineer class	instanceVariableNames: ''!!Engineer class methodsFor: 'instance creation' stamp: 'PLP 10/29/2017 20:12'!new: aTerrain with: aStartingCoordinate and: aTeamColour	^ self new with: aTerrain with: aStartingCoordinate and: aTeamColour ! !GameCharacter subclass: #Explorer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Explorer methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:59'!selectVisibleFrom: aCollection	^ aCollection select: [ :anElementOrCharacter | anElementOrCharacter isVisibleByExplorer ]! !!Explorer methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:42'!canHeal	^ false ! !!Explorer methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 23:01'!action	^ [ :aGameObject | aGameObject team: (self team) ]! !!Explorer methodsFor: 'testing' stamp: 'PLP 10/30/2017 03:30'!canSee: anElement	^ anElement isVisibleByExplorer! !!Explorer methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 23:42'!target	^ [:aGameObject | (aGameObject isTargetOfExplorer)]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Explorer class	instanceVariableNames: ''!!Explorer class methodsFor: 'instance creation' stamp: 'PLP 10/30/2017 02:02'!new: aTerrain with: aStartingCoordinate and: aTeamColour	^ self new with: aTerrain with: aStartingCoordinate and: aTeamColour ! !Object subclass: #GameTeam	instanceVariableNames: 'name members'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!GameTeam methodsFor: 'getter' stamp: 'MichaelJackson 11/7/2017 23:05'!name	"name attribute getter"	^name! !!GameTeam methodsFor: 'getter' stamp: 'MichaelJackson 11/7/2017 23:05'!members	"members attribute getter"	^members! !!GameTeam methodsFor: 'setter' stamp: 'MichaelJackson 11/7/2017 22:57'!initializeName: teamName team: team 	name := teamName.	members := team.	^self.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GameTeam class	instanceVariableNames: ''!!GameTeam class methodsFor: 'construction' stamp: 'MichaelJackson 11/7/2017 22:57'!new: teamName with: orderedCollection	"GameTeam constructor"	^ ((self new) initializeName: teamName team: orderedCollection)! !GameCharacter subclass: #Medic	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Medic methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:59'!selectVisibleFrom: aCollection	^ aCollection select: [ :anElementOrCharacter | anElementOrCharacter isVisibleByMedic ]! !!Medic methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:46'!canHeal	 ^ healthy.! !!Medic methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:47'!action	^ [ :aGameObject | aGameObject healedBy: self ]! !!Medic methodsFor: 'testing' stamp: 'PLP 10/30/2017 03:30'!canSee: anElement	^ anElement isVisibleByMedic! !!Medic methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 23:42'!target	^ [:aGameObject | (aGameObject isTargetOfMedic: (self team))]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Medic class	instanceVariableNames: ''!!Medic class methodsFor: 'instance creation' stamp: 'PLP 10/29/2017 20:11'!new: aTerrain with: aStartingCoordinate and: aTeamColour	^ self new with: aTerrain with: aStartingCoordinate and: aTeamColour ! !Direction subclass: #North	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!North commentStamp: '<historical>' prior: 0!North!!North methodsFor: 'evaluating' stamp: 'MartinFosco 11/1/2017 21:50'!nextFrom: aCoordinate	^ (aCoordinate x) @ ((aCoordinate y) + 1)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!North class	instanceVariableNames: ''!!North class methodsFor: 'evaluating' stamp: 'PLP 10/14/2017 23:33'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x)@(puntoDeOrigen y + 1)! !Direction subclass: #Northeast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Northeast commentStamp: '<historical>' prior: 0!Northeast!!Northeast methodsFor: 'evaluating' stamp: 'MartinFosco 11/1/2017 22:11'!nextFrom: aCoordinate	^ ((aCoordinate x) + 1) @ ((aCoordinate y) + 1)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Northeast class	instanceVariableNames: ''!!Northeast class methodsFor: 'evaluating' stamp: 'PLP 10/9/2017 17:57'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x + 1)@(puntoDeOrigen y + 1)! !Direction subclass: #Northwest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Northwest commentStamp: '<historical>' prior: 0!Northwest!!Northwest methodsFor: 'evaluating' stamp: 'MartinFosco 11/1/2017 21:50'!nextFrom: aCoordinate	^ ((aCoordinate x) - 1) @ ((aCoordinate y) + 1)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Northwest class	instanceVariableNames: ''!!Northwest class methodsFor: 'evaluating' stamp: 'PLP 10/9/2017 17:57'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x - 1)@(puntoDeOrigen y + 1)! !Direction subclass: #South	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!South commentStamp: '<historical>' prior: 0!South!!South methodsFor: 'evaluating' stamp: 'MartinFosco 11/1/2017 21:50'!nextFrom: aCoordinate	^ (aCoordinate x) @ ((aCoordinate y) - 1)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!South class	instanceVariableNames: ''!!South class methodsFor: 'evaluating' stamp: 'PLP 10/14/2017 23:33'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x)@(puntoDeOrigen y - 1)! !Direction subclass: #Southeast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Southeast commentStamp: '<historical>' prior: 0!Southeast!!Southeast methodsFor: 'evaluating' stamp: 'MartinFosco 11/1/2017 21:51'!nextFrom: aCoordinate	^ ((aCoordinate x) + 1) @ ((aCoordinate y) - 1)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Southeast class	instanceVariableNames: ''!!Southeast class methodsFor: 'evaluating' stamp: 'PLP 10/9/2017 17:58'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x + 1)@(puntoDeOrigen y - 1)! !Direction subclass: #Southwest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Southwest commentStamp: '<historical>' prior: 0!Southwest!!Southwest methodsFor: 'evaluating' stamp: 'MartinFosco 11/1/2017 21:52'!nextFrom: aCoordinate	^ ((aCoordinate x) - 1) @ ((aCoordinate y) - 1)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Southwest class	instanceVariableNames: ''!!Southwest class methodsFor: 'evaluating' stamp: 'PLP 10/9/2017 17:58'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x - 1)@(puntoDeOrigen y - 1)! !Object subclass: #Terrain	instanceVariableNames: 'terrain'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 11/4/2017 16:36'!at: aCoordinate put: aTerrainElement		self at: aCoordinate put: aTerrainElement ifInvalid: [ ^ nil ].	^ self! !!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 12/6/2017 18:18'!visibleAt: aCoordinate	^ (self at: aCoordinate) value! !!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 12/6/2017 18:01'!at: aCoordinate put: aGameObject ifInvalid: aBlock		| x y |	x := aCoordinate x.	y := aCoordinate y.	terrain at: x at: y ifInvalid: aBlock.	terrain at: x at: y put: aGameObject.	^ self! !!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 11/4/2017 16:37'!remove: aTerrainElement		self find: aTerrainElement andDo: [ :elementPosition | self at:elementPosition put: nil. ].	^ self! !!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 11/1/2017 22:34'!find: aTerrainElement andDo: aBlock	^ aBlock value: (terrain indexOf: aTerrainElement ifAbsent: [ ^ nil ])! !!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 11/4/2017 16:34'!move: aGameCharacter in: aDirection	|characterPosition characterNextPosition content|	characterPosition := self coordinateOf: aGameCharacter.	characterNextPosition := aDirection nextFrom: characterPosition.	content := self at: characterNextPosition.	self at: characterNextPosition put: aGameCharacter.	self at: characterPosition put: nil.	content ifNotNil: [aGameCharacter disable] ifNil: [aGameCharacter interactWithAllElements].	^ self! !!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 11/1/2017 22:37'!coordinateOf: anObject		^ terrain indexOf: anObject ifAbsent: [ ^ nil ].	! !!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 11/1/2017 22:33'!at: aCoordinate	^ terrain at: (aCoordinate x) at: (aCoordinate y) ifInvalid: nil! !!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 11/1/2017 22:33'!contains: aCoordinate	^ (aCoordinate x between: 1 and: (terrain numberOfRows)) and:	(aCoordinate y between: 1 and: (terrain numberOfColumns))! !!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 12/6/2017 18:42'!elementsAround: aGameCharacter satisfying: anElementCondition			^ (self elementsAround: aGameCharacter) select: [ :anElement | anElementCondition value: anElement ].					! !!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 11/4/2017 01:26'!coordinateOf: aDirection from: aGameObject 	^ aDirection nextFrom: (self coordinateOf: aGameObject )! !!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 12/6/2017 18:42'!elementsAround: aGameCharacter	| positionsAround objectsAround|		self find: aGameCharacter andDo:		[ :characterPosition |			positionsAround := characterPosition eightNeighbors.				objectsAround := (positionsAround 				collect: [ :aPosition | self at: aPosition ])				select: [ :anObject | (anObject isNotNil)].			^ aGameCharacter selectVisibleFrom: objectsAround.		]			! !!Terrain methodsFor: 'accessing' stamp: 'PLP 10/30/2017 01:33'!select: aBlock	^ (terrain asOrderedCollection reject: [ :element | element isNil ]) select: aBlock! !!Terrain methodsFor: 'accessing' stamp: 'MartinFosco 11/1/2017 22:50'!canBeOccupied: aCoordinate	|elementAtCoordinate|		elementAtCoordinate := (self at: aCoordinate).		^ (self contains: aCoordinate) and: [(elementAtCoordinate isNil) or: [elementAtCoordinate canBeSteppedOn]]! !!Terrain methodsFor: 'as yet unclassified' stamp: 'MartinFosco 11/4/2017 16:36'!dimX: aHorSize dimY: aVertSize	terrain := Matrix rows: aHorSize columns: aVertSize element: nil.	^ self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Terrain class	instanceVariableNames: ''!!Terrain class methodsFor: 'as yet unclassified' stamp: 'PLP 10/29/2017 19:02'!dimX: aHorSize dimY: aVertSize	^ Terrain new dimX: aHorSize dimY: aVertSize! !GameObject subclass: #TerrainElement	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TerrainElement methodsFor: 'testing' stamp: 'PLP 10/29/2017 18:57'!value	self subclassResponsibility ! !!TerrainElement methodsFor: 'testing' stamp: 'MartinFosco 11/1/2017 21:54'!canBeSteppedOn	self subclassResponsibility ! !!TerrainElement methodsFor: 'testing' stamp: 'PLP 10/29/2017 18:57'!isVisible	self subclassResponsibility ! !!TerrainElement methodsFor: 'accessing' stamp: 'MartinFosco 11/2/2017 22:28'!isTargetOfMedic: medicTeam	^ false! !TerrainElement subclass: #Flag	instanceVariableNames: 'team'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Flag methodsFor: 'testing' stamp: 'MartinFosco 11/1/2017 20:57'!canBeSteppedOn	^ false! !!Flag methodsFor: 'testing' stamp: 'PLP 10/29/2017 18:59'!team	^ team! !!Flag methodsFor: 'testing' stamp: 'PLP 10/30/2017 02:50'!isVisibleByExplorer	^ true ! !!Flag methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 18:46'!value	^ self! !!Flag methodsFor: 'testing' stamp: 'PLP 10/29/2017 18:59'!team: aTeam	team := aTeam! !!Flag methodsFor: 'testing' stamp: 'PLP 10/30/2017 02:51'!isVisibleByMedic	^ true ! !!Flag methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 20:57'!isVisible	^ true  ! !!Flag methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 20:52'!isTargetOfEngineer	^ false! !!Flag methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 20:52'!isTargetOfExplorer	^ true! !TestCase subclass: #TestsEx1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestsEx1 methodsFor: 'testing' stamp: 'PLP 10/15/2017 05:52'!test1_3_flagTeams	| flag1 flag2 flag3 |	flag1 := Flag new.	flag2 := Flag new team: #azul; yourself.	flag3 := Flag new.		self assert: flag1 team isNil.	flag1 team: #azul.	self assert: flag1 team isNil not.	flag3 team: #rojo.	self assert: flag1 team equals: flag2 team.	self assert: flag3 team equals: #rojo.	flag2 team: flag3 team.	self assert: flag2 team equals: #rojo.	! !!TestsEx1 methodsFor: 'testing' stamp: 'PLP 10/12/2017 11:54'!test1_1_canCreateTrapsAndFlags	self assert: (Flag new isKindOf: Flag).	self assert: (Trap new isKindOf: Trap).! !!TestsEx1 methodsFor: 'testing' stamp: 'PLP 10/12/2017 14:26'!test1_2_visibilityAndValue	| flag trap |	flag := Flag new.	trap := Trap new.	self assert: (flag isVisible).	self assert: (trap isVisible not).	self assert: (flag value) equals: flag.	self assert: (trap value isNil).! !TestCase subclass: #TestsEx2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestsEx2 methodsFor: 'testing' stamp: 'PLP 10/12/2017 14:37'!test2_1_pointsInTerrain	"Verifica la presencia o ausencia de puntos en el terreno"	| terrain |	terrain := Terrain dimX: 5 dimY: 4.	self assert: (terrain contains: (1@1)).	self assert: (terrain contains: (5@2)).	self assert: (terrain contains: (5@4)).	self assert: (terrain contains: (4@5)) not.	self assert: (terrain contains: (2@7)) not.	self assert: (terrain contains: (0@1)) not.! !!TestsEx2 methodsFor: 'testing' stamp: 'PLP 10/30/2017 01:43'!test2_4_remove	"Verifica la presencia o ausencia de puntos en el terreno"	| terrain flag position |	terrain := Terrain dimX: 5 dimY: 4.	flag := Flag new.	terrain at: (2@1) put: flag; at: (2@2) put: Flag new; at: (4@4) put: Flag new.	self assert: (terrain at: (2@1)) isNotNil.		position := terrain remove: flag.		self assert: (terrain at: (2@1)) isNil.	self assert: (terrain at: (2@2)) isNotNil.	self assert: (terrain at: (2@4)) isNil.	self assert: (terrain at: (4@4)) isNotNil.		terrain remove: flag.	self assert: (terrain at: (2@1)) isNil.	self assert: (terrain at: (2@2)) isNotNil.	self assert: (terrain at: (2@4)) isNil.	self assert: (terrain at: (4@4)) isNotNil.	! !!TestsEx2 methodsFor: 'testing' stamp: 'PLP 10/12/2017 14:58'!test2_3_select	"Verifica la presencia o ausencia de puntos en el terreno"	| terrain |	terrain := Terrain dimX: 5 dimY: 4.	terrain at: (2@1) put: Flag new; at: (3@2) put: Flag new; at: (4@4) put: Flag new.	terrain at: (2@2) put: Trap new; at: (3@1) put: Trap new; at: (5@4) put: Trap new.	self assert: ((terrain select: [:x| x isNotNil]) size) equals: 6.	self assert: ((terrain select: [:x| x isVisible]) size) equals: 3.! !!TestsEx2 methodsFor: 'testing' stamp: 'PLP 10/12/2017 14:48'!test2_2_gameElementsInTerrain	"Verifica la presencia o ausencia de puntos en el terreno"	| terrain |	terrain := Terrain dimX: 5 dimY: 4.	terrain at: (2@1) put: Flag new; at: (3@2) put: Flag new; at: (4@4) put: Flag new.	terrain at: (2@2) put: Trap new; at: (3@1) put: Trap new; at: (5@4) put: Trap new.	self assert: ((terrain at: (2@3)) isNil).	self assert: ((terrain at: (2@1)) isNotNil).	self assert: ((terrain visibleAt: (2@1)) isNotNil).	self assert: ((terrain at: (3@1)) isNotNil).	self assert: ((terrain visibleAt: (3@1)) isNil).	self assert: ((terrain at: (5@4)) isVisible not).	self assert: ((terrain at: (4@4)) team isNil).! !TestCase subclass: #TestsEx3	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestsEx3 methodsFor: 'testing' stamp: 'PLP 10/12/2017 15:50'!test3_3_elementsAround	"El mensaje elementsAround: debe devolver, dado un personaje, la colección de elementos adyacentes 	al personaje que este puede ver. Recordar que solo los ingenieros pueden ver las trampas."	| terrain bob dora doc |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (1@2) and: #verde.	doc := Medic new: terrain with: (4@2) and: #verde.		self assert: (terrain elementsAround: dora) size equals: 2.	self assert: (terrain elementsAround: doc) size equals: 1.	self assert: (terrain elementsAround: bob) size equals: 3.! !!TestsEx3 methodsFor: 'testing' stamp: 'PLP 10/12/2017 16:00'!test3_4_elementsAroundSatisfying	| terrain bob dora doc |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (1@2) and: #verde.		self assert: (terrain elementsAround: dora satisfying: [:x | x isVisible]) size equals: 2.	self assert: (terrain elementsAround: bob satisfying: [:x | x isVisible]) size equals: 2.		doc := Medic new: terrain with: (1@1) and: #verde.		self assert: (terrain elementsAround: doc satisfying: [:x | x ~= 0]) size equals: 2.	self assert: (terrain elementsAround: bob satisfying: [:x | x ~= #verde]) size equals: 4.	self assert: (terrain elementsAround: bob satisfying: [:x | x respondsTo: #team]) size equals: 3.	self assert: (terrain elementsAround: doc satisfying: [:x | x == bob]) size equals: 1.! !!TestsEx3 methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 17:59'!test3_2_selectSeen	"Esto testea el mensaje selectSeenFrom:, que dada una colección filtra los elementos que el receptor puede ver."	| terrain bob dora doc col |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (1@2) and: #verde.	doc := Medic new: terrain with: (4@2) and: #verde.		col := OrderedCollection with: Flag new with: dora with: Trap new with: bob with: Trap new with: doc.		self assert: (dora selectVisibleFrom: col) size equals: 4.	self assert: (bob selectVisibleFrom: col) size equals: 6.	self assert: (doc selectVisibleFrom: col) size equals: 4.	self assert: ((bob selectVisibleFrom: col) anySatisfy: [:x | x isVisible not]).	self assert: ((doc selectVisibleFrom: col) allSatisfy: [:x | x isVisible]).! !!TestsEx3 methodsFor: 'testing' stamp: 'PLP 10/13/2017 09:16'!test3_1_gameCharacterCreation	| terrain bob dora doc |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (1@2) and: #verde.	doc := Medic new: terrain with: (4@2) and: #verde.		self assert: dora team equals: bob team.	self assert: doc team equals: #verde.	self assert: (terrain at: (1@2)) equals: bob.	self should: [ Explorer new: terrain with: (2@5) and: #verde ] raise: Exception.	self assert: dora canHeal not.	self assert: bob canHeal not.	self assert: doc canHeal.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TestsEx3 class	instanceVariableNames: ''!!TestsEx3 class methodsFor: 'initializing' stamp: 'PLP 10/12/2017 15:06'!terrain	| terrain |	terrain := Terrain dimX: 5 dimY: 4.	terrain at: (2@1) put: Flag new; at: (3@2) put: Flag new; at: (4@4) put: Flag new.	terrain at: (2@2) put: Trap new; at: (3@1) put: Trap new; at: (5@4) put: Trap new.	^terrain	! !TestCase subclass: #TestsEx4	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestsEx4 methodsFor: 'testing' stamp: 'PLP 10/13/2017 10:30'!test4_4_actions| terrain bob dora doc flag trap |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (2@1) and: #verde.	doc := Medic new: terrain with: (3@4) and: #verde.	flag := terrain at: (2@2).	trap := terrain at: (1@2).		dora disable.		self assert: (trap isKindOf: Trap).	self assert: flag team isNil.	self assert: dora canMove not.		bob action value: trap.	doc action value: dora.	dora action value: flag.		self assert: (terrain at: (1@2)) isNil.	self assert: flag team equals: #verde.	self assert: dora canMove.	! !!TestsEx4 methodsFor: 'testing' stamp: 'PLP 10/15/2017 01:20'!test4_3_targets"Cada personaje tiene su objetivo. El mensaje target debe devolver un bloque que,dado un objeto, indique si este es un objetivo para el personaje receptor."| terrain bob dora doc dean |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	dean := Explorer new: terrain with: (2@4) and: #rojo.	bob := Engineer new: terrain with: (2@1) and: #verde.	doc := Medic new: terrain with: (3@4) and: #verde.		dora disable.	dean disable.		self assert: (dora target value: Flag new).	self assert: (dora target value: Trap new) not.	self assert: (doc target value: dora).	self assert: (doc target value: bob) not.	self assert: (doc target value: dean) not.	self assert: (doc target value: Trap new) not.	self assert: (bob target value: Trap new).	self assert: (bob target value: Flag new) not.! !!TestsEx4 methodsFor: 'testing' stamp: 'MartinFosco 11/1/2017 20:08'!test4_1_mobility| terrain bob dora doc |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (2@1) and: #verde.	doc := Medic new: terrain with: (3@4) and: #verde.		self assert: bob canMove.	self assert: doc canMove.	self assert: dora canMove.		dora disable.		self assert: dora canMove not.	self should: [ dora healedBy: bob ] raise: Exception.	self assert: dora canMove not.	self assert: doc canHeal.		dora healedBy: doc.		self assert: dora canMove.		doc disable.		self assert: doc canHeal not.	self assert: doc canMove not.	self should: [ doc healedBy: doc ] raise: Exception.! !!TestsEx4 methodsFor: 'testing' stamp: 'PLP 10/15/2017 02:04'!test4_6_moving	"moveTo: mueve el personaje un paso en la dirección indicada, si es posible.	move:to: mueve el personaje una cantidad dada de pasos en la dirección indicada, mientras sea posible."	| terrain bob dora doc dean |	terrain := self class terrain.	dora := Explorer new: terrain with: 2 @ 3 and: #verde.	dean := Explorer new: terrain with: 2 @ 4 and: #rojo.	bob := Engineer new: terrain with: 2 @ 1 and: #verde.	doc := Medic new: terrain with: 3 @ 4 and: #verde.		self assert: ((terrain at: 3 @ 3) isKindOf: Trap).	self assert: (dean canMoveTo: Direction southeast).		dora moveTo: Direction east.		self assert: dora location equals: 3 @ 3.	self assert: (terrain at: 3 @ 3) equals: dora.	self assert: dora canMove not.	dora moveTo: Direction south.	self assert: dora location equals: 3 @ 3.	self assert: (dean canMoveTo: Direction southeast) not.	"No se puede mover hacia el sudeste porque está Dora."		dean moveTo: Direction southeast.		self assert: dean location equals: 2 @ 4.		doc moveTo: Direction east.		self assert: dora canMove.	"Doc la curó al pasar a su lado."			dean moveTo: Direction south.		self assert: dean location equals: 2 @ 3.	self assert: (terrain at: 4 @ 3) team isNil.	self assert: (terrain at: 2 @ 2) team equals: #rojo.		dora moveTo: Direction south.	self assert: dora location equals: 3 @ 2.	self assert: (terrain at: 4 @ 3) team equals: #verde.	self assert: (terrain at: 2 @ 2) team equals: #verde.		dean moveTo: Direction west.		self assert: (terrain at: 4 @ 3) team equals: #verde.	self assert: (terrain at: 2 @ 2) team equals: #rojo.	self assert: ((terrain at: 4 @ 2) isKindOf: Trap).		bob move: 3 to: Direction east.		self assert: bob location equals: 4 @ 1.	"Se movió 2 lugares y se chocó con la bandera."	self assert: ((terrain at: 4 @ 2) isNil).! !!TestsEx4 methodsFor: 'testing' stamp: 'MartinFosco 11/1/2017 21:41'!test4_2_directions| terrain bob dora doc |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (2@1) and: #verde.	doc := Medic new: terrain with: (3@4) and: #verde.		self assert: (bob canMoveTo: Direction northeast).	self assert: (doc canMoveTo: Direction west).	self assert: (dora canMoveTo: Direction east).	self assert: (dora canMoveTo: Direction south) not.	self assert: (dora canMoveTo: Direction northeast) not.	self assert: (doc canMoveTo: Direction north) not.		bob disable.		self assert: (bob canMoveTo: Direction northeast) not.! !!TestsEx4 methodsFor: 'testing' stamp: 'PLP 10/13/2017 10:38'!test4_5_interactWithAllElements| terrain bob dora doc |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (3@2) and: #verde.	doc := Medic new: terrain with: (3@4) and: #verde.		dora disable.		self assert: ((terrain at: (3@3)) isKindOf: Trap).	self assert: ((terrain at: (4@2)) isKindOf: Trap).	self assert: (terrain at: (2@2)) team isNil.	self assert: dora canMove not.		bob interactWithAllElements.	doc interactWithAllElements.	dora interactWithAllElements.		self assert: (terrain at: (3@3)) isNil.	self assert: (terrain at: (4@2)) isNil.	self assert: (terrain at: (2@2)) team equals: #verde.	self assert: dora canMove.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TestsEx4 class	instanceVariableNames: ''!!TestsEx4 class methodsFor: 'initializing' stamp: 'PLP 10/13/2017 09:22'!terrain	| terrain |	terrain := Terrain dimX: 5 dimY: 4.	terrain at: (5@1) put: Flag new; at: (2@2) put: Flag new; at: (4@3) put: Flag new.	terrain at: (1@2) put: Trap new; at: (4@2) put: Trap new; at: (3@3) put: Trap new.	^terrain! !TestCase subclass: #TestsEx5	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestsEx5 methodsFor: 'testing' stamp: 'mgatti 11/9/2017 00:19'!test5_3_game	"Ya se puede empezar a jugar.	El mensaje moveCharacter:to:steps: mueve el iésimo personaje del equipo actual una cierta cantidad 	de pasos en la dirección indicada."	| game trapLocations flagLocations |	flagLocations := OrderedCollection with: (5@1) with: (2@2) with: (4@3).	trapLocations := OrderedCollection with: (1@2) with: (4@2) with: (3@3).		game := Game newX: 5 Y: 4 trapLocations: trapLocations flagLocations: flagLocations.	game registerTeam: #verde playerLocations: {(2@3) . Explorer . (3@4) . Medic}.	game registerTeam: #rojo  playerLocations: {(2@4) . Explorer . (2@1) . Engineer}.	self assert: game currentTeam name equals: #verde.	game pass.	self assert: game currentTeam name equals: #rojo.	game pass.	self assert: game currentTeam name equals: #verde.	game moveCharacter: 1 to:  Direction east steps: 1.	self assert: game currentWinners isEmpty.	self assert: game currentTeam name equals: #rojo.	game moveCharacter: 1 to:  Direction south steps: 1.	self assert: (game currentWinners includes: #rojo).		self assert: game currentTeam name equals: #verde.	game moveCharacter: 2 to:  Direction east steps: 1.	self assert: (game currentWinners includes: #rojo).		self assert: game currentTeam name equals: #rojo.	game moveCharacter: 2 to:  Direction east steps: 3.	self assert: (game currentWinners includes: #rojo).		self assert: game currentTeam name equals: #verde.	game moveCharacter: 1 to:  Direction south steps: 1.	self assert: (game currentWinners includes: #rojo) not.	self assert: (game currentWinners includes: #verde).	self assert: game currentTeam name equals: #rojo.	game moveCharacter: 1 to:  Direction west steps: 1.	self assert: (game currentWinners includes: #rojo).	self assert: (game currentWinners includes: #verde).	! !!TestsEx5 methodsFor: 'testing' stamp: 'MichaelJackson 11/7/2017 23:04'!test5_1_gameTeam	| terrain dora doc greenTeam|	terrain := self class terrain.	dora := Explorer new: terrain with: 2@3 and: #verde.	doc := Medic new: terrain with: 3@4 and: #verde.		greenTeam := GameTeam new: #verde with: (OrderedCollection with: dora with: doc).	self assert: greenTeam members size equals: 2.	self assert: (greenTeam members includes: dora).	self assert: greenTeam name equals: #verde.! !!TestsEx5 methodsFor: 'testing' stamp: 'Anonymous 11/8/2017 00:44'!test5_2_registerTeam	| game trapLocations flagLocations playerLocations|	flagLocations := OrderedCollection with: (5@1) with: (2@2) with: (4@3).	trapLocations := OrderedCollection with: (1@2) with: (4@2) with: (3@3).		game := Game newX: 5 Y: 4 trapLocations: trapLocations flagLocations: flagLocations.	playerLocations := {(2@3). Explorer. (3@4). Medic}.		game registerTeam: #verde playerLocations: playerLocations.	self assert: game currentTeam members size equals: 2.	self assert: game currentTeam name equals: #verde.	self assert: (game currentTeam members first isKindOf: Explorer).	self assert: ((game currentTeam members at: 2) isKindOf: Medic).	self assert: (game currentTeam members at: 2) team equals: (game currentTeam name).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TestsEx5 class	instanceVariableNames: ''!!TestsEx5 class methodsFor: 'initializing' stamp: 'PLP 10/15/2017 02:32'!terrain	| terrain |	terrain := Terrain dimX: 5 dimY: 4.	terrain at: (5@1) put: Flag new; at: (2@2) put: Flag new; at: (4@3) put: Flag new.	terrain at: (1@2) put: Trap new; at: (4@2) put: Trap new; at: (3@3) put: Trap new.	^terrain! !TerrainElement subclass: #Trap	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Trap methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 20:53'!isTargetOfEngineer	^ true! !!Trap methodsFor: 'testing' stamp: 'MartinFosco 11/1/2017 22:48'!canBeSteppedOn	^ true! !!Trap methodsFor: 'testing' stamp: 'PLP 10/30/2017 02:51'!isVisibleByMedic	^ false! !!Trap methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 20:53'!isTargetOfExplorer	^ false! !!Trap methodsFor: 'testing' stamp: 'MartinFosco 12/6/2017 18:16'!isVisible	^ false! !!Trap methodsFor: 'testing' stamp: 'MartinFosco 11/2/2017 23:20'!value	^ nil! !!Trap methodsFor: 'testing' stamp: 'PLP 10/30/2017 02:50'!isVisibleByExplorer	^ false! !Direction subclass: #West	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!West commentStamp: '<historical>' prior: 0!West!!West methodsFor: 'evaluating' stamp: 'MartinFosco 11/1/2017 22:11'!nextFrom: aCoordinate	^ ((aCoordinate x) - 1) @ (aCoordinate y)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!West class	instanceVariableNames: ''!!West class methodsFor: 'evaluating' stamp: 'PLP 10/14/2017 23:34'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x - 1)@(puntoDeOrigen y)! !